---
- name: backend1
  hosts: vm_backend1
  become: True

  tasks:
    
    - name: Install nginx
      apt: name=nginx update_cache=yes cache_valid_time=3600

    - name: copy nginx config file
      template: src=templates/nginx_back.conf.j2 dest={{ nginx_conf_file }}

    - name: enable configuration
      file: dest=/etc/nginx/sites-enabled/default src={{ nginx_conf_file }} state=link

    - name: copy index.html
      template: src=templates/index1.html.j2 dest=/usr/share/nginx/html/index.html
        mode=0644

    - name: restart nginx
      service: name=nginx state=restarted
          
 #        - name: Print the value of a variable
 #          debug:
 #             msg: "{{ hostvars }}"

 #         - name: Print the value of a variable
 #           debug:
 #            msg: "{{ groups.vm_jump }}"
          
- name: backend2  
  hosts: vm_backend2
  become: True

  tasks:
    
    - name: Install nginx
      apt: name=nginx update_cache=yes cache_valid_time=3600
    
    - name: copy nginx config file
      template: src=templates/nginx_back.conf.j2 dest={{ nginx_conf_file }}

    - name: enable configuration
      file: dest=/etc/nginx/sites-enabled/default src={{ nginx_conf_file }} state=link

    - name: copy index.html
      template: src=templates/index2.html.j2 dest=/usr/share/nginx/html/index.html
        mode=0644

    - name: restart nginx
      service: name=nginx state=restarted

- name: db
  hosts: vm_db
  become: True
  
  tasks:

    - name: install pip3
      apt: name=python3-pip state=present

    - name: Make sure psycopg2 is installed
      pip:
        name: psycopg2-binary
        state: present    
    
    - name: Add postgresql apt repository key
      apt_key:
        url: https://www.postgresql.org/media/keys/ACCC4CF8.asc
        state: present

    - name: Add postgresql apt repository
      apt_repository:
        repo: "deb http://apt.postgresql.org/pub/repos/apt/ {{ ansible_distribution_release }}-pgdg main"
        state: present
        update_cache: yes

    - name: Install postgresql dependencies
      apt:
        name: acl
        state: present

    - name: Install postgresql
      apt:
        name: "postgresql-{{ pg_version }}"
        state: present

    - name: Ensure postgresql is enabled running
      service:
        name: postgresql
        enabled: yes
        state: started

    - name: Change listen_addresses to '*'
      lineinfile:
        dest: "/etc/postgresql/{{ pg_version }}/main/postgresql.conf"
        regexp: "^#listen_addresses"
        line: "listen_addresses = '*'"
        state: present
        backup: yes
      notify:
        - restart postgresql

    - name: Configure pg_hba.conf
      template:
        src: ./templates/pg_hba.conf.j2
        dest: "/etc/postgresql/{{ pg_version }}/main/pg_hba.conf"
        owner: postgres
      notify:
        - restart postgresql

    - name: "Ensure the database {{ database_name }} is created"
      become: yes
      become_user: postgres
      postgresql_db:
        name: "{{ database_name }}"
        encoding: UTF-8
        lc_collate: en_US.UTF-8
        lc_ctype: en_US.UTF-8
        template: template0

    - name: "Ensure the user {{ database_user }} has access to the database"
      become: yes
      become_user: postgres
      postgresql_user:
        db: "{{ database_name }}"
        name: "{{ database_user }}"
        password: "{{ database_password }}"
        encrypted: yes
        priv: ALL 
      
  handlers:

    - name: enable postgresql
      service: name=postgresql enabled=yes

    - name: start postgresql
      service: name=postgresql state=started

    - name: stop postgresql
      service: name=postgresql state=stopped

    - name: restart postgresql
      service: name=postgresql state=restarted

    - name: reload postgresql
      service: name=postgresql state=reloaded
    

- name: frontend
  hosts: vm_frontend
  become: True
  
  tasks:
    
    - name: Install nginx
      apt: name=nginx update_cache=yes cache_valid_time=3600
    
    - name: copy nginx config file
      template: src=templates/nginx.conf.j2 dest={{ nginx_conf_file }}

    - name: enable configuration
      file: dest=/etc/nginx/sites-enabled/default src={{ nginx_conf_file }} state=link

    - name: restart nginx
      service: name=nginx state=restarted    

