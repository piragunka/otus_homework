---
- name: backend1
  hosts: vm_backend1
  become: True
  vars:
    jump_host: '{{ groups.vm_jump[0] }}'
    ansible_user: ubuntu
    conf_file: /etc/nginx/sites-available/default
    var_server_name: '{{ groups.vm_backend1[0] }}'
    ansible_ssh_private_key_file: ~/.ssh/id_rsa
    ansible_ssh_common_args: '-o "UserKnownHostsFile=/dev/null" -o "StrictHostKeyChecking=no" -o ProxyCommand="ssh -W %h:%p ubuntu@{{ jump_host }}"'

  tasks:
    
    - name: Install nginx
      apt: name=nginx update_cache=yes cache_valid_time=3600

    - name: copy nginx config file
      template: src=templates/nginx_back.conf.j2 dest={{ conf_file }}

    - name: enable configuration
      file: dest=/etc/nginx/sites-enabled/default src={{ conf_file }} state=link

    - name: copy index.html
      template: src=templates/index1.html.j2 dest=/usr/share/nginx/html/index.html
        mode=0644

    - name: restart nginx
      service: name=nginx state=restarted
          
 #        - name: Print the value of a variable
 #          debug:
 #             msg: "{{ hostvars }}"

 #         - name: Print the value of a variable
 #           debug:
 #            msg: "{{ groups.vm_jump }}"
          
- name: backend2  
  hosts: vm_backend2
  become: True
  vars:
    jump_host: '{{ groups.vm_jump[0] }}'
    ansible_user: ubuntu
    conf_file: /etc/nginx/sites-available/default
    var_server_name: '{{ groups.vm_backend1[0] }}'
    ansible_ssh_private_key_file: ~/.ssh/id_rsa
    ansible_ssh_common_args: '-o "UserKnownHostsFile=/dev/null" -o "StrictHostKeyChecking=no" -o ProxyCommand="ssh -W %h:%p ubuntu@{{ jump_host }}"'
  tasks:
    
    - name: Install nginx
      apt: name=nginx update_cache=yes cache_valid_time=3600
    
    - name: copy nginx config file
      template: src=templates/nginx_back.conf.j2 dest={{ conf_file }}

    - name: enable configuration
      file: dest=/etc/nginx/sites-enabled/default src={{ conf_file }} state=link

    - name: copy index.html
      template: src=templates/index2.html.j2 dest=/usr/share/nginx/html/index.html
        mode=0644

    - name: restart nginx
      service: name=nginx state=restarted

- name: db
  hosts: vm_db
  become: True
  vars_files:
    - vars.yml
  vars:
    jump_host: '{{ groups.vm_jump[0] }}'
    ansible_user: ubuntu
    ansible_ssh_private_key_file: ~/.ssh/id_rsa
    ansible_ssh_common_args: '-o "UserKnownHostsFile=/dev/null" -o "StrictHostKeyChecking=no" -o ProxyCommand="ssh -W %h:%p ubuntu@{{ jump_host }}"'

  tasks:

    - name: Add postgresql apt repository key
      apt_key:
        url: https://www.postgresql.org/media/keys/ACCC4CF8.asc
        state: present

    - name: Add postgresql apt repository
      apt_repository:
        repo: "deb http://apt.postgresql.org/pub/repos/apt/ {{ ansible_distribution_release }}-pgdg main"
        state: present
        update_cache: yes

    - name: Install postgresql dependencies
      apt:
        name: acl
        state: present

    - name: Install postgresql
      apt:
        name: "postgresql-13"
        state: present

    - name: Ensure postgresql is enabled running
      service:
        name: postgresql
        enabled: yes
        state: started

    - name: Change listen_addresses to '*'
      lineinfile:
        dest: "/etc/postgresql/13/main/postgresql.conf"
        regexp: "^#listen_addresses"
        line: "listen_addresses = '*'"
        state: present
        backup: yes
      notify:
        - restart postgresql
    

- name: frontend
  hosts: vm_frontend
  become: True
  vars:

    jump_host: '{{ groups.vm_jump[0] }}'
    ansible_user: ubuntu
    conf_file: /etc/nginx/sites-available/default
    var_backend1: '{{ groups.vm_backend1[0] }}'
    var_backend2: '{{ groups.vm_backend2[0] }}'
    var_server_name: '{{ groups.vm_frontend[0] }}'
    ansible_ssh_private_key_file: ~/.ssh/id_rsa
    ansible_ssh_common_args: '-o "UserKnownHostsFile=/dev/null" -o "StrictHostKeyChecking=no" -o ProxyCommand="ssh -W %h:%p ubuntu@{{ jump_host }}"'

  tasks:
    
    - name: Install nginx
      apt: name=nginx update_cache=yes cache_valid_time=3600
    
    - name: copy nginx config file
      template: src=templates/nginx.conf.j2 dest={{ conf_file }}

    - name: enable configuration
      file: dest=/etc/nginx/sites-enabled/default src={{ conf_file }} state=link

    - name: restart nginx
      service: name=nginx state=restarted  

         

